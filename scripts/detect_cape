#! /usr/bin/php
<?php

$validSignature = false;
$deleteEpromFile = false;

if (file_exists("/etc/fpp/platform")) {
    $platform = trim(file_get_contents("/etc/fpp/platform"));
}

if ($platform == FALSE) {
    $platform = exec("uname -s");
}

$I2CBUS = "2";
if ($platform == "Raspberry Pi") {
    // need to modprobe the i2c-dev stuff so the i2c bus becomes available
    $I2CBUS = "1";
    exec("modprobe i2c-dev 2>&1");
}

function HasI2CDevice($id) {
    global $I2CBUS;
    $cmd = "i2cdetect -y -r $I2CBUS 0x$id 0x$id | colrm 1 3 | grep $id";
    exec($cmd, $output, $result);
    if ($result != 0) {
	$cmd = "i2cdetect -y -r $I2CBUS 0x$id 0x$id | colrm 1 3 | grep UU";
	exec($cmd, $output, $result);
	if ($result != 0) {	
	    return false;
	}
    }
    return true;
}

function DoSignatureVerify($keyId, $fp, $sigFile) {
    global $validSignature, $deleteEpromFile;
    $fpEEPROM = fopen("/home/fpp/media/tmp/eeprom", "wb");

    $flenOrig = fread($fp, 6);
    $flen = intval($flenOrig);
    while ($flen != 0) {
        $flags = fread($fp, 2);
        fwrite($fpEEPROM, pack("a6", $flen));
        fwrite($fpEEPROM, pack("a2", $flags));
        if ($flags < 90) {
            $fname = fread($fp, 64);
            $fname = trim($fname);
            fwrite($fpEEPROM, pack("a64", $fname));
        }
        $fdata = fread($fp, $flen);
        fwrite($fpEEPROM, $fdata);

        $flenOrig = fread($fp, 6);
        $flen = intval($flenOrig);
    }
    fwrite($fpEEPROM, pack("a6", "0"));
    //to test verification failure,  uncomment
    //fwrite($fpEEPROM, pack("a6", "0"));
    fclose($fpEEPROM);
    fclose($fp);
    $fp = fopen("/home/fpp/media/tmp/eeprom", "r");
    $deleteEpromFile = true;

    $cmd = "openssl dgst -sha256 -verify /opt/fpp/scripts/keys/" . $keyId . "_pub.pem -signature $sigFile /home/fpp/media/tmp/eeprom";
    exec($cmd, $output, $result);
    if ($result != 0) {
        echo "EEPROM Signature verfication failed:\n";
        foreach ($output as $key => $value) {
            echo "    $value\n";
        }
        unset($output);
    }  else {
        $validSignature = true;
    }
    return $fp;
}

function checkUnsupported($orig) {
    global $platform;
    if ($platform == "BeagleBone Black") {
        $subPlat = trim(file_get_contents("/proc/device-tree/model"));
        if (strpos($subPlat, 'PocketBeagle') !== false) {
            return $orig;
        }
        if (HasI2CDevice("3c")) {
            return "/opt/fpp/capes/other/Unknown-eeprom.bin";
        }
    }
    return $orig;
}


//while waiting, we can cleanup tmp
if (!file_exists("/home/fpp/media/tmp") && !is_dir("/home/fpp/media/tmp")) {
    mkdir("/home/fpp/media/tmp");
}
$dir = '/home/fpp/media/tmp';
$it = new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS);
$files = new RecursiveIteratorIterator($it,
             RecursiveIteratorIterator::CHILD_FIRST);
foreach($files as $file) {
    if ($file->isDir()){
        rmdir($file->getRealPath());
    } else {
        unlink($file->getRealPath());
    }
}

//we'll wait for up to 15 seconds for i2c bus to become available
$count = 15;
for ($i = 0; $i < $count; $i++) {
    if (file_exists("/sys/bus/i2c/devices/i2c-" . $I2CBUS . "/new_device")) {
        break;
    }
    usleep(1000000);
}

$EEPROM = "/home/fpp/media/config/cape-eeprom.bin";
if (HasI2CDevice("50")) {
    $EEPROM = "/sys/bus/i2c/devices/" . $I2CBUS . "-0050/eeprom";
    if (file_exists("/sys/bus/i2c/devices/i2c-" . $I2CBUS . "/new_device")) {
        // detect and initialize the eeprom, only support 24c256 chips for now
	if (!file_exists($EEPROM)) {
	    echo "Registering 24c256 EEPROM device\n";
            @file_put_contents("/sys/bus/i2c/devices/i2c-" . $I2CBUS . "/new_device", "24c256 0x50");
            for ($i = 0; $i < 10; $i++) {
                if (file_exists($EEPROM)) {
                    break;
                 }
                 usleep(100000);
             }
        }
	if (!file_exists($EEPROM)) {
            $EEPROM = "/home/fpp/media/config/cape-eeprom.bin";
        }
    }
}
if (!file_exists($EEPROM)) {
    $EEPROM = "/opt/fpp-vendor/cape-eeprom.bin";
}
if (!file_exists($EEPROM)) {
    $EEPROM = checkUnsupported($EEPROM);
}
if (!file_exists($EEPROM)) {
    echo "Could not detect any cape\n";
    exit(0);
}
echo  "Using EEPROM: $EEPROM \n";
$fp = fopen($EEPROM, 'rb');
$header = fread($fp, 6); // should be FPP02 + null
if (substr( $header, 0, 5 ) != "FPP02") {
    if (file_exists("/home/fpp/media/config/cape-eeprom.bin")) {
        fclose($fp);
        $EEPROM = "/home/fpp/media/config/cape-eeprom.bin";
        $fp = fopen($EEPROM, 'rb');
        $header = fread($fp, 6);
    }
}
$extras = array();
if (substr( $header, 0, 5 ) === "FPP02") {
    $cape = fread($fp, 26); // cape name + nulls
    $capev = fread($fp, 10); // cape version + nulls
    $capesn = trim(fread($fp, 16)); // cape serial# + nulls

    $flen = fread($fp, 6); //length of the file
    $flen = intval($flen);
    while ($flen != 0) {
        $flags = fread($fp, 2);
        if ($flags < 50) {
            $fname = fread($fp, 64);
            $fname = trim($fname);
            $path = '/home/fpp/media/' . $fname;
        }
        switch ($flags) {
        case 0:
            $fdata = fread($fp, $flen);
            file_put_contents($path, $fdata);
            break;
        case 1:
            $fdata = fread($fp, $flen);
            file_put_contents($path, $fdata);
            $dirname = dirname("/home/fpp/media/" . $fname);
            exec("cd $dirname ; unzip /home/fpp/media/$fname 2>&1", $output, $result);
            //var_dump($output);
            unset($output);
            unlink("/home/fpp/media/" . $fname);
            break;
        case 2:
            $fdata = fread($fp, $flen);
            file_put_contents($path, $fdata);
            $dirname = dirname($path);
            $cmd = "cd $dirname ; tar -xzf $path 2>&1";
            exec($cmd, $output, $result);
            //var_dump($output);
            unset($output);
            unlink($path);
            break;
        case 97:
            $eKey = trim(fread($fp, 12));
            $eValue = trim(fread($fp, $flen - 12));
            $extras[$eKey] = $eValue;
            break;
        case 98:
            $eType = fread($fp, 2);
            if ($eType == 1) {
                if (strpos($EEPROM, 'cape-eeprom.bin') !== false) {
                    $validSignature = false;
                }
            } else if ($eType == 2) {
                if (strpos($EEPROM, '/i2c') !== false) {
                    $validSignature = false;
                }
            } else if ($eType != 0) {
                $validSignature = false;
            }
            break;
        case 99:
            $fkeyId = fread($fp, 6);
            $fkeyId = trim($fkeyId);
            $fdata = fread($fp, $flen - 6);
            $path = '/home/fpp/media/tmp/eeprom.sig';
            file_put_contents($path, $fdata);
            $fp = DoSignatureVerify($fkeyId, $fp, $path);
            unlink($path);
            break;
        default:
            $fdata = fread($fp, $flen); // read the data to skip it for now
            echo "Don't know how to handle " . $fname . " with type " . $flags . "\n";
        }

        $flen = fread($fp, 6); //length of the file
        $flen = intval($flen);
    }
}
fclose($fp);

// if the cape-info has default settings and those settings are not already set, set them
// also put the serialNumber into the cape-info for display
if (file_exists("/home/fpp/media/tmp/cape-info.json")) {
    $json = json_decode(file_get_contents("/home/fpp/media/tmp/cape-info.json"));
    if ($json->id != "Unsupported" && $json->id != "Unknown") {
        $json->serialNumber = $capesn;
    }
    foreach($extras as $key => $value) {
        $json->{$key} = $value;
    }
    if (! $validSignature) {
        unset($json->vendor);
        unset($json->provides);
        unset($json->verifiedKeyId);
    } else {
        $json->verifiedKeyId = $fkeyId;
        if (IsSet($json->defaultSettings)) {
            foreach ($json->defaultSettings as $key => $value) {
                if (strpos(file_get_contents("/home/fpp/media/settings"), $key . " =") == false) {
                    file_put_contents("/home/fpp/media/settings", $key . " = \"" . $value . "\"\n", FILE_APPEND);
                }
            }
        }
    }
    if (IsSet($json->removeSettings)) {
        $settingsContent = file_get_contents("/home/fpp/media/settings");
        $settings = explode(PHP_EOL, $settingsContent);
        foreach ($json->removeSettings as $key) {
            $keyToRemove = false;
            foreach ($settings as $lineNumber => $line) {
                if (strpos($line, $key) !== false) {
                    $keyToRemove = $lineNumber;
                }
            }
            if ($keyToRemove) {
                unset($settings[$keyToRemove]);
            }
        }
        $newsettings = implode(PHP_EOL, $settings);
        file_put_contents("/home/fpp/media/settings", $newsettings);
    }
    $jsonData = json_encode($json, JSON_PRETTY_PRINT);
    file_put_contents("/home/fpp/media/tmp/cape-info.json", $jsonData);
}

// if there are default configurations, copy them into place if they dont already exist
if ($validSignature) {
    $path = "/home/fpp/media/tmp/defaults/";
    if (file_exists($path) && is_dir($path)) {
        $directory = new RecursiveDirectoryIterator($path, FilesystemIterator::SKIP_DOTS );
        $objects = new RecursiveIteratorIterator($directory);
        foreach($objects as $name => $object){
            $fname = substr($name, strlen($path));
            if (!file_exists("/home/fpp/media/" . $fname)) {
                copy($name, "/home/fpp/media/" . $fname);
            }
        }
    }
} else {
    if (file_exists("/home/fpp/media/tmp/cape-sensors.json")) unlink("/home/fpp/media/tmp/cape-sensors.json");
    if (file_exists("/home/fpp/media/tmp/cape-inputs.json")) unlink("/home/fpp/media/tmp/cape-inputs.json");
}

if ($deleteEpromFile) {
    unlink("/home/fpp/media/tmp/eeprom");
}

@file_put_contents("/sys/bus/i2c/devices/i2c-" . $I2CBUS . "/delete_device", "0x50");

exec("chown -R fpp:fpp  /home/fpp/media/tmp");
exec("chmod -R u+rw /home/fpp/media/tmp");
exec("chmod -R g+rw /home/fpp/media/tmp");
exec("chmod -R o+r /home/fpp/media/tmp");
exec("chmod -R u-s /home/fpp/media/tmp");
exec("chmod -R g-s /home/fpp/media/tmp");
exec("chmod -R o-s /home/fpp/media/tmp");
exec("find /home/fpp/media/tmp -type d -exec chmod +x {} \;");


?>
